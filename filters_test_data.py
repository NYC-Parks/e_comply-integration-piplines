from logging import getLogger
from pandas import DataFrame
from ParksGIS import LayerQuery
from filters import set_deltas

__logger = getLogger("[ Test Data ]")


def mock_server_gens():
    import time

    seconds = 60 * 60 * 5
    epoch: int = round(time.time() - seconds) * 1000

    server_gens = DataFrame(
        {
            "OBJECTID": 1,
            "Contract": [epoch],
            "WorkOrder": [epoch],
        }
    )

    return server_gens


def static_workorders(context: dict) -> dict | None:
    layer_id = 0

    data = context["repo"].query(
        [
            LayerQuery(
                layer_id,
                [
                    "ActualFinishDate",
                    "Comments",
                    "Contract",
                    "LocationDetails",
                    "Project",
                    "PROJSTARTDATE",
                    "RecommendedSpecies",
                    "Status",
                    "Type",
                    "WOEntity",
                    "CancelDate",
                    "CancelReason",
                    "CancelByERN",
                    "CancelByName",
                    "ClosedDate",
                    "ClosedByERN",
                    "ClosedByName",
                    "ClosedBySystem",
                    "CreatedDate",
                    "CreatedBYERN",
                    "CreatedByName",
                    "UpdatedDate",
                    "UpdatedByERN",
                    "UpdatedByName",
                    "GlobalID",
                    "InspectionGlobalID",
                    "OBJECTID",
                ],
                "OBJECTID IN (630610,630617,631004,631047,631414,631419,631824,631827,632609,634646,635090,636648,651829,652124,655689,789854,1663933,2583357,2880592,2880594,2977446,2980622,3412678,3421471,3427069,4217103,5756513,7260528,7294892,7349280,7353018,7353019,7353020,7353021,7353022,7415031,7415037,7428788,7428791,7449912,7453515,7634271,7636269,7750947,7752948,7912282,7912283,7912284,8075277,8236118,8236186,8541626,8581033,8596562,8601717,8661646,8702362,8705564,8710364,8710365,8711962,8722780,8759275,8759280,8759281,8759283,8759286,8759289,8771986,8772386,8776787,8777215,8795237,8935321,8936945,8936954,8936959,8937321,8962164,9030228,9056230,9131222,9138859,9138875,9138878,9138881,9138885,9140189,9140190,9145627,9145632,9145636,9149799,9149803,9150127,9157321,9157331,9157348,9171637,9172503,9188429,9245901,9260710,9946820,13266576,13334033,13337955,18010892,18463957,18464354,19052401,21285405,21285409,22298819,22298822,22298823,22298824,22298825,22298826,22298827,22298828,22298830,22298831,22298834,22298835,22298836,22468789,22955891,22955893,22955895,22955900,22955905,22955908,22955912,22955916,22975699,22975700,22975703,22975706,22975710,22977680,22977681,22977686,22981803,23025315,23040785,23040787,23040788,23040793,23040798,23040801,23040807,23040809,23041303,23041307,23047546,23047547,23056060,23273348,23273350,23273352,23273353,23273378,23276280,23276327,23276328,23277502,23304113,23304114,23304115,23304121,23304124,23304125,23304126,23304127,23304146,23304154,23304157,23304971,23304972,23305377,23316781,23316782,23316785,23318075,23318078,23318090,23318100,23318146,23318150,23318161,23318164,23318166,23318167,23318180,23318195,23318199,23318200,23318201,23318217,23318218,23318221,23332847,23332860,23335329,23335337,23335340,23335342,23335344,23335348,23335351,23335364,23335373,23336156,23441223,23462352,23490236,23490248,23490269,23608249,23608251,23608253,23608254,23608257,23608258,23626744,23626751,23626755,23626756,23638331,23638333,23660099,24195498,24318771,24318772,24319646,24320933,24320934,24329947,24329948,24329949,24329954,24330742,24350807,24350811,24350814,24350826,24350827,24357131,24357132,24357140,24357141,24357142,24357143,24357144,24357146,24358371,24367164,24367166,24367167,24368477,24368479,24368660,24395529,24395530,24414079,24414080,24414081,24414082,24414083,24415679,24415680,24415681,24415682,24415683,24415684,24419647,24419648,24438505,24451747,24508940,24508942,24508957,24508958,24508959,24508961,24515857,24533598,24533599,24533605,24533606,24533607,24533608,24533635,24551500,24573458,24573465,24573466,24573468,24578812,24585353,24585374,24585375,24585378,24585379,24585380,24585395,24585396,24585397,24585398,24585399,24585400,24585405,24585411,24585412,24585413,24585420,24585421,24587530,24620899,24620901,24652803,24654979,24654990,24657179,24657181,24722996,24735670,24735672,24735677,24738199,24738212,24738214,24738219,24738227,24738256,24738259,24738260,24738261,24738262,24738264,24738266,24738267,24738269,24738272,24738274,24738277,24738278,24738313,24738315,24738316,24738318,24738319,24738320,24738323,24738325,24738329,24738330,24738331,24738333,24738335,24738337,24738338,24738339,24738340,24738341,24738342,24738344,24738346,24738347,24738349,24738350,24738353,24833664,24833665,24833667,24833668,24833670,24833671,24833673,24833674,24833679,24833682,24833686,24833689,24833692,24833694,24833697,24833722,24835757,24835759,24869434,24869435,24869436,24884513,24884520,24887871,24887910,24887913,24887914,24887915,24887916,24887918,24887920,24887921,24888310,24897245,24897988,24897989,24897996,24898981,24905495,24915476,24915477,24915478,24915480,24915481,24915482,24915483,24915485,24915486,24939030,24939031,24939035,24939038,24939039,24939040,24939041,24939042,24939043,24939044,24939045,24939046,24939047,24939048,24939049,24939051,24939424,24943071,24943089,24943090,24943091,24943092,24943093,24943094,24943095,24943096,24943097,24952782,24952783,24952784,24952785,24952786,24952791,24952793,24952794,24952796,24952798,24952799,24952800,24952801,24952802,24952803,24952804,24952806,24952809,25191598,25193026,25193027,25193028,25198959,25199004,25199006,25272244,25272254,25272261,25272262,25272263,25272264,25272265,25272266,25272267,25272268,25272269,25272270,25272271,25272456,25272466,25272468,25300728,25300731,25341341,25341342,25398515,25454159,25454166,26099728,26099729,26099730,26099731)",
            )
        ]
    )[layer_id]

    set_deltas(context, data, layer_id)
    __logger.debug(f"Static Work Orders Extracted: {len(data)}")

    return context
